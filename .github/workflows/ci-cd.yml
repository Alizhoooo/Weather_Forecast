name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CACHE_KEY: node-modules

jobs:
  # Quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: weather-forecast-app/package-lock.json

      - name: Install dependencies
        working-directory: weather-forecast-app
        run: npm ci

      - name: Type check
        working-directory: weather-forecast-app
        run: npm run type-check

      - name: Lint check
        working-directory: weather-forecast-app
        run: npm run lint:check

      - name: Format check
        working-directory: weather-forecast-app
        run: npm run format:check

  # Unit tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: weather-forecast-app/package-lock.json

      - name: Install dependencies
        working-directory: weather-forecast-app
        run: npm ci

      - name: Run unit tests
        working-directory: weather-forecast-app
        run: npm run test:unit:run

      - name: Generate coverage report
        working-directory: weather-forecast-app
        run: npm run test:unit:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: weather-forecast-app/coverage
          fail_ci_if_error: false

  # E2E tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: weather-forecast-app/package-lock.json

      - name: Install dependencies
        working-directory: weather-forecast-app
        run: npm ci

      - name: Install Playwright browsers
        working-directory: weather-forecast-app
        run: npx playwright install --with-deps

      - name: Build application
        working-directory: weather-forecast-app
        run: npm run build

      - name: Run E2E tests
        working-directory: weather-forecast-app
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: weather-forecast-app/playwright-report/
          retention-days: 30

  # Build and deploy
  build-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: weather-forecast-app/package-lock.json

      - name: Install dependencies
        working-directory: weather-forecast-app
        run: npm ci

      - name: Build for production
        working-directory: weather-forecast-app
        run: npm run build:production
        env:
          VITE_BUILD_SOURCEMAP: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: weather-forecast-app/dist/
          retention-days: 30

      # Deploy to Netlify (if using Netlify)
      - name: Deploy to Netlify
        if: github.ref == 'refs/heads/main'
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: weather-forecast-app/dist
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Docker build and push
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: weather-forecast-app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: weather-forecast-app
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64